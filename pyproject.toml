[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "econonet"
description = "Advanced Economic Intelligence Platform with Real-time API Integration"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
    {email = "econet@example.com"},
    {name = "EconoNet Team"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Financial and Insurance Industry", 
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Office/Business :: Financial",
]
dependencies = [
    "streamlit>=1.28.0",
    "pandas>=1.5.0",
    "numpy>=1.21.0",
    "plotly>=5.17.0",
    "scipy>=1.9.0",
    "scikit-learn>=1.3.0",
    "requests>=2.31.0",
    "requests-cache>=1.1.0",
    "feedparser>=6.0.10",
    "textblob>=0.17.1",
    "nltk>=3.8.1",
    "tenacity>=8.2.0",
    "python-dateutil>=2.8.0",
    "nbconvert>=7.7.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "plotly>=5.15.0",
    "requests>=2.31.0",
    "requests-cache>=1.1.0",
    "tenacity>=8.2.0",
    "scikit-learn>=1.3.0",
    "scipy>=1.11.0",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "responses>=0.23.0",
    "black>=23.0.0",
    "ruff>=0.0.280",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "papermill>=2.4.0",
    "nbconvert>=7.7.0",
]
notebooks = [
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
    "papermill>=2.4.0",
    "nbconvert>=7.7.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.1.0",
    "mkdocstrings[python]>=0.22.0",
]

[project.urls]
Homepage = "https://github.com/MadScie254/EconoNet"
Repository = "https://github.com/MadScie254/EconoNet"
Documentation = "https://github.com/MadScie254/EconoNet/docs"
"Bug Tracker" = "https://github.com/MadScie254/EconoNet/issues"

[tool.setuptools_scm]
write_to = "src/econonet/_version.py"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
econonet = ["py.typed"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["F401", "F811"]

[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "plotly.*",
    "requests_cache.*",
    "tenacity.*",
    "sklearn.*",
    "scipy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "api: marks tests that require API access",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
